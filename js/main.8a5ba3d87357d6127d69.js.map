{"version":3,"sources":["webpack:///./demo/client/components/DemoEditor/styles.css","webpack:///./demo/public/base.css","webpack:///./demo/public/Draft.css","webpack:///./demo/public/prism.css","webpack:///./src/components/Code/index.jsx","webpack:///./src/constants.js","webpack:///./src/decorators/image/imageStrategy.js","webpack:///./src/components/Image/index.js","webpack:///./src/decorators/image/index.js","webpack:///./src/decorators/link/linkStrategy.js","webpack:///./src/components/Link/index.js","webpack:///./src/decorators/link/index.js","webpack:///./src/modifiers/changeCurrentBlockType.js","webpack:///./src/modifiers/handleBlockType.js","webpack:///./src/modifiers/insertImage.js","webpack:///./src/modifiers/handleImage.js","webpack:///./src/modifiers/changeCurrentInlineStyle.js","webpack:///./src/modifiers/removeInlineStyles.js","webpack:///./src/modifiers/insertText.js","webpack:///./src/utils.jsx","webpack:///./src/modifiers/handleInlineStyle.js","webpack:///./src/modifiers/insertLink.js","webpack:///./src/modifiers/handleLink.js","webpack:///./src/modifiers/insertEmptyBlock.js","webpack:///./src/modifiers/splitBlockAndChange.js","webpack:///./src/modifiers/handleNewCodeBlock.js","webpack:///./src/modifiers/leaveList.js","webpack:///./src/modifiers/resetInlineStyle.js","webpack:///./src/index.js","webpack:///./demo/client/components/DemoEditor/index.jsx","webpack:///./demo/client/components/DemoEditor/initial-state.js","webpack:///./demo/client/index.jsx","webpack:///./demo/client/App.jsx"],"names":["module","exports","alias","javascript","jsx","CodeSwitchContainer","props","onOutsideClick","onClickOutside","contentEditable","onClick","children","CodeBlock","isOpen","setIsOpen","React","useState","languages","renderLanguageSelect","getReadOnly","language","_language","blockProps","selectedLabel","selectedValue","options","Object","keys","reduce","acc","val","label","value","getEditorState","setReadOnly","setEditorState","editorState","selection","getSelection","EditorState","forceSelection","event","stopPropagation","onChange","ev","preventDefault","blockKey","block","getKey","currentTarget","blockSelection","merge","anchorKey","focusKey","content","getCurrentContent","Modifier","mergeBlockData","Map","newEditorState","push","CODE_BLOCK_REGEX","inlineMatchers","BOLD","ITALIC","CODE","STRIKETHROUGH","createImageStrategy","entityType","contentBlock","callback","contentState","findEntityRanges","character","entityKey","getEntity","getType","Image","src","alt","title","getData","createImageDecorator","strategy","component","createLinkStrategy","Link","href","createLinkDecorator","changeCurrentBlockType","type","text","blockMetadata","currentContent","key","getStartKey","blockMap","getBlockMap","get","data","newBlock","lastOffset","length","getFocusOffset","anchorOffset","focusOffset","newContentState","set","selectionAfter","blockTypes","headerReg","handleBlockType","whiteList","currentSelection","getBlockForKey","getText","position","getAnchorOffset","line","slice","join","blockType","RichUtils","getCurrentBlockType","headerMatch","match","includes","replace","matchArr","insertImage","matchText","index","wordSelection","SelectionState","createEmpty","nextContent","createEntity","getLastCreatedEntityKey","replaceText","insertText","getSelectionAfter","newWordSelection","toggleLink","AtomicBlockUtils","insertAtomicBlock","handleImage","re","exec","changeCurrentInlineStyle","style","getInlineStyleAt","find","styles","removeInlineStyle","removeInlineStyles","markdownCharacterLength","afterSelection","removeRange","applyInlineStyle","setInlineStyleOverride","OrderedSet","of","isCollapsed","getCurrentInlineStyle","getCurrentLine","handleChange","whitelist","filter","matcher","some","k","handleInlineStyle","editorStateWithoutCharacter","getLine","lastEditorState","splitBlock","insertLink","url","handleLink","insertEmptyBlock","currentBlock","emptyBlockKey","genKey","emptyBlock","ContentBlock","characterList","List","depth","blocksBefore","toSeq","takeUntil","blocksAfter","skipUntil","rest","augmentedBlocks","newBlocks","concat","toOrderedMap","selectionBefore","isBackward","splitBlockAndChange","selectNewBlock","handleNewCodeBlock","matchData","currentText","endOffset","getEndOffset","isLast","trim","editorStateWithCodeBlock","undefined","leaveList","toggleBlockType","size","inLink","getAnchorKey","getEntityAt","inCodeBlock","startKey","checkCharacterForState","config","features","inline","IMAGE","LINK","test","checkReturnForState","blockLength","getLength","isHeader","isBlockQuote","isAtEndOfLine","shiftKey","unstickyInlineStyles","getLastChangeType","startOffset","getStartOffset","previousBlock","getBlockBefore","newContent","defaultConfig","map","bash","c","cpp","css","go","html","java","js","kotlin","mathml","perl","ruby","scala","sql","svg","swift","createMarkdownPlugin","_config","store","decorators","initialize","blockStyleFn","blockRendererFn","getEditorRef","handleReturn","is","getImmutable","resetInlineStyle","handleBeforeInput","eventTimeStamp","unsticky","handlePastedText","handleKeyCommand","command","currentBlockKey","getFirstBlock","currentBlockType","plugins","createPrismPlugin","prism","Prism","className","switcherContainer","switcher","switcherSelect","switcherLabel","String","fromCharCode","initialEditorState","createWithContent","convertFromRaw","entityMap","0","mutability","blocks","inlineStyleRanges","entityRanges","offset","DemoEditor","editorRef","createRef","root","editor","current","focus","spellCheck","autoFocus","placeholder","ref","ReactDOM","render","height","target","direction","document","getElementById"],"mappings":"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","file":"js/main.8a5ba3d87357d6127d69.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"root___1w01h\",\"editor\":\"editor___18GAG\",\"switcherContainer\":\"switcherContainer___2VznX\",\"switcher\":\"switcher___3axrb\",\"switcherSelect\":\"switcherSelect___1wutg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"root___3jf2b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DraftEditor-editorContainer\":\"DraftEditor-editorContainer___120eS\",\"draftEditorEditorContainer\":\"DraftEditor-editorContainer___120eS\",\"DraftEditor-root\":\"DraftEditor-root___1rsLV\",\"draftEditorRoot\":\"DraftEditor-root___1rsLV\",\"public-DraftEditor-content\":\"public-DraftEditor-content___5Be8h\",\"publicDraftEditorContent\":\"public-DraftEditor-content___5Be8h\",\"public-DraftEditor-block\":\"public-DraftEditor-block___1whDb\",\"publicDraftEditorBlock\":\"public-DraftEditor-block___1whDb\",\"DraftEditor-alignLeft\":\"DraftEditor-alignLeft___2-LKi\",\"draftEditorAlignLeft\":\"DraftEditor-alignLeft___2-LKi\",\"public-DraftStyleDefault-block\":\"public-DraftStyleDefault-block___2nzip\",\"publicDraftStyleDefaultBlock\":\"public-DraftStyleDefault-block___2nzip\",\"public-DraftEditorPlaceholder-root\":\"public-DraftEditorPlaceholder-root___2j0Ck\",\"publicDraftEditorPlaceholderRoot\":\"public-DraftEditorPlaceholder-root___2j0Ck\",\"DraftEditor-alignCenter\":\"DraftEditor-alignCenter___2Qfof\",\"draftEditorAlignCenter\":\"DraftEditor-alignCenter___2Qfof\",\"DraftEditor-alignRight\":\"DraftEditor-alignRight___3ISjv\",\"draftEditorAlignRight\":\"DraftEditor-alignRight___3ISjv\",\"public-DraftEditorPlaceholder-hasFocus\":\"public-DraftEditorPlaceholder-hasFocus___QhZ3M\",\"publicDraftEditorPlaceholderHasFocus\":\"public-DraftEditorPlaceholder-hasFocus___QhZ3M\",\"DraftEditorPlaceholder-hidden\":\"DraftEditorPlaceholder-hidden___2SfuO\",\"draftEditorPlaceholderHidden\":\"DraftEditorPlaceholder-hidden___2SfuO\",\"public-DraftStyleDefault-ltr\":\"public-DraftStyleDefault-ltr___3AHMi\",\"publicDraftStyleDefaultLtr\":\"public-DraftStyleDefault-ltr___3AHMi\",\"public-DraftStyleDefault-rtl\":\"public-DraftStyleDefault-rtl___2g4VI\",\"publicDraftStyleDefaultRtl\":\"public-DraftStyleDefault-rtl___2g4VI\",\"public-DraftStyleDefault-listLTR\":\"public-DraftStyleDefault-listLTR___39Myc\",\"publicDraftStyleDefaultListLtr\":\"public-DraftStyleDefault-listLTR___39Myc\",\"public-DraftStyleDefault-listRTL\":\"public-DraftStyleDefault-listRTL___bWreX\",\"publicDraftStyleDefaultListRtl\":\"public-DraftStyleDefault-listRTL___bWreX\",\"public-DraftStyleDefault-ol\":\"public-DraftStyleDefault-ol___1pOIb\",\"publicDraftStyleDefaultOl\":\"public-DraftStyleDefault-ol___1pOIb\",\"public-DraftStyleDefault-ul\":\"public-DraftStyleDefault-ul___3ThjF\",\"publicDraftStyleDefaultUl\":\"public-DraftStyleDefault-ul___3ThjF\",\"public-DraftStyleDefault-depth0\":\"public-DraftStyleDefault-depth0___1q2l-\",\"publicDraftStyleDefaultDepth0\":\"public-DraftStyleDefault-depth0___1q2l-\",\"public-DraftStyleDefault-depth1\":\"public-DraftStyleDefault-depth1___niNKX\",\"publicDraftStyleDefaultDepth1\":\"public-DraftStyleDefault-depth1___niNKX\",\"public-DraftStyleDefault-depth2\":\"public-DraftStyleDefault-depth2___2EUHo\",\"publicDraftStyleDefaultDepth2\":\"public-DraftStyleDefault-depth2___2EUHo\",\"public-DraftStyleDefault-depth3\":\"public-DraftStyleDefault-depth3___15SMX\",\"publicDraftStyleDefaultDepth3\":\"public-DraftStyleDefault-depth3___15SMX\",\"public-DraftStyleDefault-depth4\":\"public-DraftStyleDefault-depth4___1WW0V\",\"publicDraftStyleDefaultDepth4\":\"public-DraftStyleDefault-depth4___1WW0V\",\"public-DraftStyleDefault-unorderedListItem\":\"public-DraftStyleDefault-unorderedListItem___2tFeY\",\"publicDraftStyleDefaultUnorderedListItem\":\"public-DraftStyleDefault-unorderedListItem___2tFeY\",\"public-DraftStyleDefault-orderedListItem\":\"public-DraftStyleDefault-orderedListItem___1dHVP\",\"publicDraftStyleDefaultOrderedListItem\":\"public-DraftStyleDefault-orderedListItem___1dHVP\",\"public-DraftStyleDefault-reset\":\"public-DraftStyleDefault-reset___mjuJO\",\"publicDraftStyleDefaultReset\":\"public-DraftStyleDefault-reset___mjuJO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"token\":\"token___2QnXS\",\"comment\":\"comment___30MEf\",\"prolog\":\"prolog___E5gP-\",\"doctype\":\"doctype___IobmA\",\"cdata\":\"cdata___2anNE\",\"punctuation\":\"punctuation___aB4Ln\",\"namespace\":\"namespace___zH5DA\",\"property\":\"property___15MhR\",\"tag\":\"tag___pLWpi\",\"boolean\":\"boolean___Hn9pI\",\"number\":\"number___1u3Zf\",\"constant\":\"constant___2H6QC\",\"symbol\":\"symbol___uPcFf\",\"deleted\":\"deleted___34JqV\",\"selector\":\"selector___1XCIX\",\"attr-name\":\"attr-name___GogMl\",\"attrName\":\"attr-name___GogMl\",\"string\":\"string___37c69\",\"char\":\"char___2dOed\",\"builtin\":\"builtin___2Py37\",\"inserted\":\"inserted___Fe1Da\",\"operator\":\"operator___1cbxO\",\"entity\":\"entity___1KywY\",\"url\":\"url___2qb1g\",\"language-css\":\"language-css___jQ5wf\",\"languageCss\":\"language-css___jQ5wf\",\"style\":\"style___1n-Y9\",\"atrule\":\"atrule___21lli\",\"attr-value\":\"attr-value___2Tdnr\",\"attrValue\":\"attr-value___2Tdnr\",\"keyword\":\"keyword___1YicE\",\"function\":\"function___3VNwd\",\"regex\":\"regex___3ty_C\",\"important\":\"important___1i68e\",\"variable\":\"variable___2sB0-\",\"bold\":\"bold___2gQb3\",\"italic\":\"italic___3ReIK\"};","import React, { PureComponent } from \"react\";\nimport { Map } from \"immutable\";\nimport { EditorState, EditorBlock, Modifier } from \"draft-js\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\n\nconst alias = {\n  javascript: \"js\",\n  jsx: \"js\",\n};\n\nfunction CodeSwitchContainer(props) {\n  function handleClickOutside() {\n    props.onClickOutside();\n  }\n\n  return (\n    <OutsideClickHandler onOutsideClick={() => handleClickOutside()}>\n      <div contentEditable={false} onClick={props.onClick}>\n        {props.children}\n      </div>\n    </OutsideClickHandler>\n  );\n}\n\nfunction CodeBlock(props) {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  function onChange(ev) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    const blockKey = props.block.getKey();\n    const { getEditorState, setReadOnly, setEditorState } = props.blockProps;\n\n    const editorState = getEditorState();\n    const selection = editorState.getSelection();\n    const language = ev.currentTarget.value;\n    const blockSelection = selection.merge({\n      anchorKey: blockKey,\n      focusKey: blockKey,\n    });\n\n    setIsOpen(false);\n\n    let content = editorState.getCurrentContent();\n    content = Modifier.mergeBlockData(\n      content,\n      blockSelection,\n      Map({\n        language,\n      })\n    );\n    setReadOnly(false);\n\n    const newEditorState = EditorState.push(\n      editorState,\n      content,\n      \"change-block-data\"\n    );\n\n    setEditorState(EditorState.forceSelection(newEditorState, selection));\n  }\n\n  function cancelClicks(event) {\n    return event.preventDefault();\n  }\n\n  function onSelectClick(event) {\n    setIsOpen(true);\n    const { setReadOnly } = props.blockProps;\n    event.stopPropagation();\n    setReadOnly(true);\n    setIsOpen(true);\n  }\n\n  function onClickOutside() {\n    if (isOpen === false) return;\n    setIsOpen(false);\n    const { getEditorState, setReadOnly, setEditorState } = props.blockProps;\n\n    setReadOnly(false);\n    setIsOpen(false);\n\n    const editorState = getEditorState();\n    const selection = editorState.getSelection();\n\n    setEditorState(EditorState.forceSelection(editorState, selection));\n  }\n\n  const {\n    languages,\n    renderLanguageSelect,\n    getReadOnly,\n    language: _language,\n  } = props.blockProps;\n\n  const language = alias[_language] || _language;\n  const selectedLabel = languages[language];\n  const selectedValue = language;\n\n  const options = Object.keys(languages).reduce(\n    (acc, val) => [\n      ...acc,\n      {\n        label: languages[val],\n        value: val,\n      },\n    ],\n    []\n  );\n\n  return (\n    <div>\n      <EditorBlock {...props} />{\" \"}\n      <CodeSwitchContainer\n        onClickOutside={onClickOutside}\n        onClick={onSelectClick}\n      >\n        {\" \"}\n        {!getReadOnly() &&\n          renderLanguageSelect({\n            selectedLabel,\n            selectedValue,\n            onChange,\n            options,\n          })}{\" \"}\n      </CodeSwitchContainer>{\" \"}\n    </div>\n  );\n}\n\nexport default CodeBlock;\n","export const CODE_BLOCK_REGEX = /^```([\\w-]+)?\\s*$/;\n\nexport const inlineMatchers = {\n  BOLD: [/(?:^|\\s)\\*(.+)\\*$/g],\n  ITALIC: [/(?:^|\\s)_(.+)_$/g],\n  CODE: [/(?:^|\\s)`([^`]+)`$/g],\n  STRIKETHROUGH: [/(?:^|\\s)~(.+)~$/g],\n};\n\nexport const CODE_BLOCK_TYPE = \"code-block\";\n\nexport const ENTITY_TYPE = {\n  IMAGE: \"IMG\",\n  LINK: \"LINK\",\n};\n\nexport const defaultInlineWhitelist = [\n  \"BOLD\",\n  \"ITALIC\",\n  \"CODE\",\n  \"STRIKETHROUGH\",\n  \"LINK\",\n  \"IMAGE\",\n];\n\nexport const defaultBlockWhitelist = [\n  \"CODE\",\n  \"header-one\",\n  \"header-two\",\n  \"header-three\",\n  \"header-four\",\n  \"header-five\",\n  \"header-six\",\n  \"ordered-list-item\",\n  \"unordered-list-item\",\n  \"blockquote\",\n];\n","const createImageStrategy = ({ entityType }) => {\n  const findImageEntities = (contentBlock, callback, contentState) => {\n    contentBlock.findEntityRanges(character => {\n      const entityKey = character.getEntity();\n      return (\n        entityKey !== null &&\n        contentState.getEntity(entityKey).getType() === entityType\n      );\n    }, callback);\n  };\n  return findImageEntities;\n};\n\nexport default createImageStrategy;\n","import React from \"react\";\n\nconst Image = ({ entityKey, children, contentState }) => {\n  const { src, alt, title } = contentState.getEntity(entityKey).getData();\n  return (\n    <span>\n      {children}\n      <img src={src} alt={alt} title={title} />\n    </span>\n  );\n};\n\nexport default Image;\n","import createImageStrategy from \"./imageStrategy\";\nimport Image from \"../../components/Image\";\n\nconst createImageDecorator = ({ entityType }) => ({\n  strategy: createImageStrategy({ entityType }),\n  component: Image,\n});\n\nexport default createImageDecorator;\n","const createLinkStrategy = ({ entityType }) => {\n  const findLinkEntities = (contentBlock, callback, contentState) => {\n    contentBlock.findEntityRanges(character => {\n      const entityKey = character.getEntity();\n      return (\n        entityKey !== null &&\n        contentState.getEntity(entityKey).getType() === entityType\n      );\n    }, callback);\n  };\n  return findLinkEntities;\n};\n\nexport default createLinkStrategy;\n","import React from \"react\";\n\nconst Link = props => {\n  const { href, title } = props.contentState\n    .getEntity(props.entityKey)\n    .getData();\n  return (\n    <a href={href} title={title}>\n      {props.children}\n    </a>\n  );\n};\n\nexport default Link;\n","import createLinkStrategy from \"./linkStrategy\";\nimport Link from \"../../components/Link\";\n\nconst createLinkDecorator = ({ entityType }) => ({\n  strategy: createLinkStrategy({ entityType }),\n  component: Link,\n});\n\nexport default createLinkDecorator;\n","import { EditorState } from \"draft-js\";\n\nconst changeCurrentBlockType = (\n  editorState,\n  type,\n  text,\n  blockMetadata = {}\n) => {\n  const currentContent = editorState.getCurrentContent();\n  let selection = editorState.getSelection();\n  const key = selection.getStartKey();\n  const blockMap = currentContent.getBlockMap();\n  const block = blockMap.get(key);\n  const data = block.getData().merge(blockMetadata);\n  const newBlock = block.merge({ type, data, text });\n\n  const lastOffset = text.length;\n\n  if (selection.getFocusOffset() > lastOffset) {\n    selection = selection.merge({\n      anchorOffset: lastOffset,\n      focusOffset: lastOffset,\n    });\n  }\n\n  const newContentState = currentContent.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selection,\n  });\n\n  return EditorState.push(editorState, newContentState, \"change-block-type\");\n};\n\nexport default changeCurrentBlockType;\n","import { RichUtils } from \"draft-js\";\nimport changeCurrentBlockType from \"./changeCurrentBlockType\";\n\nconst sharps = len => {\n  let ret = \"\";\n  while (ret.length < len) {\n    ret += \"#\";\n  }\n  return ret;\n};\n\nconst blockTypes = {\n  \"#\": \"header-one\",\n  \"##\": \"header-two\",\n  \"###\": \"header-three\",\n  \"####\": \"header-four\",\n  \"#####\": \"header-five\",\n  \"######\": \"header-six\",\n};\n\nconst headerReg = /^(#+)\\s+/;\n\nconst handleBlockType = (whiteList, editorState, character) => {\n  const currentSelection = editorState.getSelection();\n  const key = currentSelection.getStartKey();\n  const text = editorState\n    .getCurrentContent()\n    .getBlockForKey(key)\n    .getText();\n  const position = currentSelection.getAnchorOffset();\n  const line = [text.slice(0, position), character, text.slice(position)].join(\n    \"\"\n  );\n  const blockType = RichUtils.getCurrentBlockType(editorState);\n\n  const headerMatch = line.match(headerReg);\n\n  if (blockType === \"unstyled\" || blockType === \"paragraph\") {\n    if (\n      headerMatch !== null &&\n      blockTypes[headerMatch[1]] !== null &&\n      whiteList.includes(blockTypes[headerMatch[1]])\n    ) {\n      return changeCurrentBlockType(\n        editorState,\n        blockTypes[headerMatch[1]],\n        line.replace(/^#+\\s/, \"\")\n      );\n    }\n\n    let matchArr = line.match(/^[*-] (.*)$/);\n    if (matchArr && whiteList.includes(\"unordered-list-item\")) {\n      return changeCurrentBlockType(\n        editorState,\n        \"unordered-list-item\",\n        matchArr[1]\n      );\n    }\n\n    matchArr = line.match(/^[\\d]\\. (.*)$/);\n    if (matchArr && whiteList.includes(\"ordered-list-item\")) {\n      return changeCurrentBlockType(\n        editorState,\n        \"ordered-list-item\",\n        matchArr[1]\n      );\n    }\n    matchArr = line.match(/^> (.*)$/);\n    if (matchArr) {\n      return changeCurrentBlockType(editorState, \"blockquote\", matchArr[1]);\n    }\n  }\n\n  return editorState;\n};\n\nexport default handleBlockType;\n","import {\n  EditorState,\n  RichUtils,\n  SelectionState,\n  Modifier,\n  AtomicBlockUtils,\n} from \"draft-js\";\n\nconst insertImage = (editorState, matchArr, entityType) => {\n  const currentContent = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const key = selection.getStartKey();\n  const [matchText, alt, src, title] = matchArr;\n  const { index } = matchArr;\n  const focusOffset = index + matchText.length;\n  const wordSelection = SelectionState.createEmpty(key).merge({\n    anchorOffset: index,\n    focusOffset,\n  });\n  const nextContent = currentContent.createEntity(entityType, \"IMMUTABLE\", {\n    alt,\n    src,\n    title,\n  });\n  const entityKey = nextContent.getLastCreatedEntityKey();\n  let newContentState = Modifier.replaceText(\n    nextContent,\n    wordSelection,\n    \"\\u200B\",\n    null,\n    entityKey\n  );\n  newContentState = Modifier.insertText(\n    newContentState,\n    newContentState.getSelectionAfter(),\n    \" \"\n  );\n  const newWordSelection = wordSelection.merge({\n    focusOffset: index + 1,\n  });\n  let newEditorState = EditorState.push(\n    editorState,\n    newContentState,\n    \"insert-image\"\n  );\n  newEditorState = RichUtils.toggleLink(\n    newEditorState,\n    newWordSelection,\n    entityKey\n  );\n  newEditorState = AtomicBlockUtils.insertAtomicBlock(\n    newEditorState,\n    newEditorState.getCurrentContent().getLastCreatedEntityKey(),\n    \" \"\n  );\n  return EditorState.forceSelection(\n    newEditorState,\n    newEditorState.getCurrentContent().getSelectionAfter()\n  );\n};\n\nexport default insertImage;\n","import insertImage from \"./insertImage\";\n\nconst handleImage = (editorState, character, entityType) => {\n  const re = /!\\[([^\\]]*)]\\(([^)\"]+)(?: \"([^\"]+)\")?\\)/g;\n  const key = editorState.getSelection().getStartKey();\n  const text = editorState\n    .getCurrentContent()\n    .getBlockForKey(key)\n    .getText();\n  const line = `${text}${character}`;\n  let newEditorState = editorState;\n  let matchArr;\n  do {\n    matchArr = re.exec(line);\n    if (matchArr) {\n      newEditorState = insertImage(newEditorState, matchArr, entityType);\n    }\n  } while (matchArr);\n  return newEditorState;\n};\n\nexport default handleImage;\n","import { OrderedSet } from \"immutable\";\nimport { EditorState, SelectionState, Modifier } from \"draft-js\";\nimport removeInlineStyles from \"./removeInlineStyles\";\n\nconst changeCurrentInlineStyle = (editorState, matchArr, style) => {\n  const currentContent = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const key = selection.getStartKey();\n  const { index } = matchArr;\n  const blockMap = currentContent.getBlockMap();\n  const block = blockMap.get(key);\n  const currentInlineStyle = block.getInlineStyleAt(index);\n  // do not modify the text if it is inside code style\n  const hasCodeStyle = currentInlineStyle.find(style => style === \"CODE\");\n  if (hasCodeStyle) {\n    return editorState;\n  }\n  const focusOffset = index + matchArr[0].length;\n\n  const wordSelection = SelectionState.createEmpty(key).merge({\n    anchorOffset: index,\n    focusOffset,\n  });\n\n  let newEditorState = editorState;\n  // remove all styles if applying code style\n  if (style === \"CODE\") {\n    newEditorState = removeInlineStyles(newEditorState, wordSelection);\n  }\n\n  const markdownCharacterLength = (matchArr[0].length - matchArr[1].length) / 2;\n\n  let newContentState = newEditorState.getCurrentContent();\n\n  // remove markdown delimiter at end\n  newContentState = Modifier.removeRange(\n    newContentState,\n    wordSelection.merge({\n      anchorOffset: wordSelection.getFocusOffset() - markdownCharacterLength,\n    })\n  );\n\n  let afterSelection = newContentState.getSelectionAfter();\n\n  afterSelection = afterSelection.merge({\n    anchorOffset: afterSelection.getFocusOffset() - markdownCharacterLength,\n    focusOffset: afterSelection.getFocusOffset() - markdownCharacterLength,\n  });\n\n  // remove markdown delimiter at start\n  newContentState = Modifier.removeRange(\n    newContentState,\n    wordSelection.merge({\n      focusOffset: wordSelection.getAnchorOffset() + markdownCharacterLength,\n    })\n  );\n\n  // apply style\n  newContentState = Modifier.applyInlineStyle(\n    newContentState,\n    wordSelection.merge({\n      anchorOffset: index,\n      focusOffset: focusOffset - markdownCharacterLength * 2,\n    }),\n    style\n  );\n\n  newEditorState = EditorState.push(\n    editorState,\n    newContentState,\n    \"change-inline-style\"\n  );\n\n  return EditorState.setInlineStyleOverride(\n    EditorState.forceSelection(newEditorState, afterSelection),\n    OrderedSet.of(\"\")\n  );\n};\n\nexport default changeCurrentInlineStyle;\n","import { EditorState, RichUtils, Modifier } from \"draft-js\";\n\nexport default (editorState, selection = editorState.getSelection()) => {\n  const styles = [\"BOLD\", \"ITALIC\", \"STRIKETHROUGH\", \"CODE\"];\n\n  const newEditorState = EditorState.push(\n    editorState,\n    styles.reduce(\n      (newContentState, style) =>\n        Modifier.removeInlineStyle(newContentState, selection, style),\n      editorState.getCurrentContent()\n    ),\n    \"change-inline-style\"\n  );\n\n  return RichUtils.toggleLink(newEditorState, selection, null);\n};\n","import { EditorState, Modifier } from \"draft-js\";\n\nconst insertText = (editorState, text) => {\n  const selection = editorState.getSelection();\n  const content = editorState.getCurrentContent();\n  if (!selection.isCollapsed()) return editorState;\n  const newContentState = Modifier.insertText(\n    content,\n    selection,\n    text,\n    editorState.getCurrentInlineStyle()\n  );\n  return EditorState.push(editorState, newContentState, \"insert-fragment\");\n};\n\nexport default insertText;\n","import { EditorState, Modifier } from \"draft-js\";\nimport React from \"react\";\n\nexport const getCurrentLine = editorState => {\n  const { anchorOffset } = editorState.getSelection();\n  const selection = editorState.getSelection().merge({\n    anchorOffset,\n  });\n  const key = editorState.getSelection().getStartKey();\n\n  return editorState\n    .getCurrentContent()\n    .getBlockForKey(key)\n    .getText()\n    .slice(0, selection.getFocusOffset());\n};\n\nexport function addText(editorState, bufferText) {\n  const contentState = Modifier.insertText(\n    editorState.getCurrentContent(),\n    editorState.getSelection(),\n    bufferText\n  );\n  return EditorState.push(editorState, contentState, \"insert-characters\");\n}\n\nexport function replaceText(editorState, bufferText) {\n  const contentState = Modifier.replaceText(\n    editorState.getCurrentContent(),\n    editorState.getSelection(),\n    bufferText\n  );\n  return EditorState.push(editorState, contentState, \"insert-characters\");\n}\n\nexport const defaultRenderSelect = ({ options, onChange, selectedValue }) => (\n  <select value={selectedValue} onChange={onChange}>\n    {options.map(({ label, value }) => (\n      <option key={value} value={value}>\n        {label}\n      </option>\n    ))}\n  </select>\n);\n","import { EditorState, Modifier } from \"draft-js\";\nimport changeCurrentInlineStyle from \"./changeCurrentInlineStyle\";\nimport { inlineMatchers } from \"../constants\";\nimport insertText from \"./insertText\";\nimport { getCurrentLine as getLine } from \"../utils\";\n\nconst handleChange = (editorState, line, whitelist) => {\n  let newEditorState = editorState;\n  Object.keys(inlineMatchers)\n    .filter(matcher => whitelist.includes(matcher))\n    .some(k => {\n      inlineMatchers[k].some(re => {\n        let matchArr;\n        do {\n          matchArr = re.exec(line);\n          if (matchArr) {\n            if (matchArr[0][0].match(/^\\s/)) {\n              matchArr[0] = matchArr[0].replace(/^\\s/, \"\");\n              matchArr.index += 1;\n            }\n            newEditorState = changeCurrentInlineStyle(\n              newEditorState,\n              matchArr,\n              k\n            );\n          }\n        } while (matchArr);\n        return newEditorState !== editorState;\n      });\n      return newEditorState !== editorState;\n    });\n  return newEditorState;\n};\n\nconst handleInlineStyle = (\n  whitelist,\n  editorStateWithoutCharacter,\n  character\n) => {\n  const editorState = insertText(editorStateWithoutCharacter, character);\n  let selection = editorState.getSelection();\n  let line = getLine(editorState);\n  let newEditorState = handleChange(editorState, line, whitelist);\n  let lastEditorState = editorState;\n\n  // Recursively resolve markdown, e.g. _*text*_ should turn into both italic and bold\n  while (newEditorState !== lastEditorState) {\n    lastEditorState = newEditorState;\n    line = getLine(newEditorState);\n    newEditorState = handleChange(newEditorState, line, whitelist);\n  }\n\n  if (newEditorState !== editorState) {\n    let newContentState = newEditorState.getCurrentContent();\n    selection = newEditorState.getSelection();\n\n    if (character === \"\\n\") {\n      newContentState = Modifier.splitBlock(newContentState, selection);\n    }\n\n    newEditorState = EditorState.push(\n      newEditorState,\n      newContentState,\n      \"md-to-inline-style\"\n    );\n\n    return newEditorState;\n  }\n\n  return editorStateWithoutCharacter;\n};\n\nexport default handleInlineStyle;\n","import { EditorState, RichUtils, SelectionState, Modifier } from \"draft-js\";\n\nconst insertLink = (editorState, matchArr, entityType) => {\n  const currentContent = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const key = selection.getStartKey();\n  const [matchText, text, href, title] = matchArr;\n  const { index } = matchArr;\n  const focusOffset = index + matchText.length;\n  const wordSelection = SelectionState.createEmpty(key).merge({\n    anchorOffset: index,\n    focusOffset,\n  });\n  const nextContent = currentContent.createEntity(entityType, \"MUTABLE\", {\n    href,\n    title,\n    url: href,\n  });\n  const entityKey = nextContent.getLastCreatedEntityKey();\n  let newContentState = Modifier.replaceText(\n    nextContent,\n    wordSelection,\n    text,\n    null,\n    entityKey\n  );\n  newContentState = Modifier.insertText(\n    newContentState,\n    newContentState.getSelectionAfter(),\n    \" \"\n  );\n  const newWordSelection = wordSelection.merge({\n    focusOffset: index + text.length,\n  });\n  let newEditorState = EditorState.push(\n    editorState,\n    newContentState,\n    \"insert-link\"\n  );\n  newEditorState = RichUtils.toggleLink(\n    newEditorState,\n    newWordSelection,\n    entityKey\n  );\n  return EditorState.forceSelection(\n    newEditorState,\n    newContentState.getSelectionAfter()\n  );\n};\n\nexport default insertLink;\n","import insertLink from \"./insertLink\";\n\nconst handleLink = (editorState, character, entityType) => {\n  const re = /\\[([^\\]]+)]\\(([^)\"]+)(?: \"([^\"]+)\")?\\)/g;\n  const key = editorState.getSelection().getStartKey();\n  const text = editorState\n    .getCurrentContent()\n    .getBlockForKey(key)\n    .getText();\n  const line = `${text}${character}`;\n  let newEditorState = editorState;\n  let matchArr;\n  do {\n    matchArr = re.exec(line);\n    if (matchArr) {\n      newEditorState = insertLink(newEditorState, matchArr, entityType);\n    }\n  } while (matchArr);\n  return newEditorState;\n};\n\nexport default handleLink;\n","import { genKey, ContentBlock, EditorState } from \"draft-js\";\nimport { List, Map } from \"immutable\";\n\nconst insertEmptyBlock = (editorState, blockType = \"unstyled\", data = {}) => {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const key = selection.getStartKey();\n  const currentBlock = contentState.getBlockForKey(key);\n  const emptyBlockKey = genKey();\n  const emptyBlock = new ContentBlock({\n    characterList: List(),\n    depth: 0,\n    key: emptyBlockKey,\n    text: \"\",\n    type: blockType,\n    data: Map().merge(data),\n  });\n  const blockMap = contentState.getBlockMap();\n  const blocksBefore = blockMap\n    .toSeq()\n    .takeUntil(value => value === currentBlock);\n  const blocksAfter = blockMap\n    .toSeq()\n    .skipUntil(value => value === currentBlock)\n    .rest();\n  const augmentedBlocks = [\n    [currentBlock.getKey(), currentBlock],\n    [emptyBlockKey, emptyBlock],\n  ];\n  const newBlocks = blocksBefore\n    .concat(augmentedBlocks, blocksAfter)\n    .toOrderedMap();\n  const focusKey = emptyBlockKey;\n  const newContentState = contentState.merge({\n    blockMap: newBlocks,\n    selectionBefore: selection,\n    selectionAfter: selection.merge({\n      anchorKey: focusKey,\n      anchorOffset: 0,\n      focusKey,\n      focusOffset: 0,\n      isBackward: false,\n    }),\n  });\n  return EditorState.push(editorState, newContentState, \"split-block\");\n};\n\nexport default insertEmptyBlock;\n","import { EditorState, Modifier } from \"draft-js\";\n\nconst splitBlockAndChange = (\n  editorState,\n  type = \"unstyled\",\n  blockMetadata = {},\n  selectNewBlock = true\n) => {\n  let currentContent = editorState.getCurrentContent();\n  const currentSelection = editorState.getSelection();\n  currentContent = Modifier.splitBlock(currentContent, currentSelection);\n  const selection = currentContent.getSelectionAfter();\n  const key = selection.getStartKey();\n  const blockMap = currentContent.getBlockMap();\n  const block = blockMap.get(key);\n  const data = block.getData().merge(blockMetadata);\n  const newBlock = block.merge({ type, data });\n  const newContentState = currentContent.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectNewBlock ? selection : currentSelection,\n  });\n\n  return EditorState.push(editorState, newContentState, \"split-block\");\n};\n\nexport default splitBlockAndChange;\n","import changeCurrentBlockType from \"./changeCurrentBlockType\";\nimport insertEmptyBlock from \"./insertEmptyBlock\";\nimport splitBlockAndChange from \"./splitBlockAndChange\";\nimport { CODE_BLOCK_REGEX } from \"../constants\";\n\nconst handleNewCodeBlock = editorState => {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const key = selection.getStartKey();\n  const currentBlock = contentState.getBlockForKey(key);\n  const matchData = CODE_BLOCK_REGEX.exec(currentBlock.getText());\n  const currentText = currentBlock.getText();\n  const endOffset = selection.getEndOffset();\n  // We .trim the text here to make sure pressing enter after \"``` \" works even if the cursor is before the space\n  const isLast =\n    endOffset === currentText.length || endOffset === currentText.trim().length;\n  if (matchData && isLast) {\n    const data = {};\n    const language = matchData[1];\n    if (language) {\n      data.language = language;\n    }\n    const editorStateWithCodeBlock = changeCurrentBlockType(\n      editorState,\n      \"code-block\",\n      \"\",\n      data\n    );\n    return splitBlockAndChange(\n      editorStateWithCodeBlock,\n      undefined,\n      undefined,\n      false\n    );\n  }\n  const type = currentBlock.getType();\n  if (type === \"code-block\" && isLast) {\n    return insertEmptyBlock(editorState, \"code-block\", currentBlock.getData());\n  }\n  return editorState;\n};\n\nexport default handleNewCodeBlock;\n","import { RichUtils } from \"draft-js\";\n\nconst leaveList = editorState => {\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const key = selection.getStartKey();\n  const currentBlock = contentState.getBlockForKey(key);\n  const type = currentBlock.getType();\n  return RichUtils.toggleBlockType(editorState, type);\n};\n\nexport default leaveList;\n","import { OrderedSet } from \"immutable\";\nimport { EditorState } from \"draft-js\";\n\nexport default editorState =>\n  editorState.getCurrentInlineStyle().size === 0\n    ? editorState\n    : EditorState.setInlineStyleOverride(editorState, OrderedSet());\n","import { EditorState, Modifier, RichUtils } from \"draft-js\";\nimport CodeBlock from \"./components/Code\";\nimport {\n  CODE_BLOCK_REGEX,\n  CODE_BLOCK_TYPE,\n  defaultBlockWhitelist,\n  defaultInlineWhitelist,\n  ENTITY_TYPE,\n} from \"./constants\";\nimport createImageDecorator from \"./decorators/image\";\nimport createLinkDecorator from \"./decorators/link\";\nimport changeCurrentBlockType from \"./modifiers/changeCurrentBlockType\";\nimport handleBlockType from \"./modifiers/handleBlockType\";\nimport handleImage from \"./modifiers/handleImage\";\nimport handleInlineStyle from \"./modifiers/handleInlineStyle\";\nimport handleLink from \"./modifiers/handleLink\";\nimport handleNewCodeBlock from \"./modifiers/handleNewCodeBlock\";\nimport insertEmptyBlock from \"./modifiers/insertEmptyBlock\";\nimport insertText from \"./modifiers/insertText\";\nimport leaveList from \"./modifiers/leaveList\";\nimport resetInlineStyle from \"./modifiers/resetInlineStyle\";\nimport splitBlockAndChange from \"./modifiers/splitBlockAndChange\";\nimport { defaultRenderSelect } from \"./utils\";\n\nconst defaultLanguages = {\n  bash: \"Bash\",\n  c: \"C\",\n  cpp: \"C++\",\n  css: \"CSS\",\n  go: \"Go\",\n  html: \"HTML\",\n  java: \"Java\",\n  js: \"JavaScript\",\n  kotlin: \"Kotlin\",\n  mathml: \"MathML\",\n  perl: \"Perl\",\n  ruby: \"Ruby\",\n  scala: \"Scala\",\n  sql: \"SQL\",\n  svg: \"SVG\",\n  swift: \"Swift\",\n};\n\nfunction inLink(editorState) {\n  const selection = editorState.getSelection();\n  const contentState = editorState.getCurrentContent();\n  const block = contentState.getBlockForKey(selection.getAnchorKey());\n  const entityKey = block.getEntityAt(selection.getFocusOffset());\n  return (\n    entityKey != null && contentState.getEntity(entityKey).getType() === \"LINK\"\n  );\n}\n\nfunction inCodeBlock(editorState) {\n  const startKey = editorState.getSelection().getStartKey();\n  if (startKey) {\n    const currentBlockType = editorState\n      .getCurrentContent()\n      .getBlockForKey(startKey)\n      .getType();\n    if (currentBlockType === \"code-block\") return true;\n  }\n\n  return false;\n}\n\nfunction checkCharacterForState(config, editorState, character) {\n  let newEditorState = handleBlockType(\n    config.features.block,\n    editorState,\n    character\n  );\n  if (\n    editorState === newEditorState &&\n    config.features.inline.includes(\"IMAGE\")\n  ) {\n    newEditorState = handleImage(\n      editorState,\n      character,\n      config.entityType.IMAGE\n    );\n  }\n  if (\n    editorState === newEditorState &&\n    config.features.inline.includes(\"LINK\")\n  ) {\n    newEditorState = handleLink(editorState, character, config.entityType.LINK);\n  }\n  if (\n    newEditorState === editorState &&\n    config.features.block.includes(\"CODE\")\n  ) {\n    const contentState = editorState.getCurrentContent();\n    const selection = editorState.getSelection();\n    const key = selection.getStartKey();\n    const currentBlock = contentState.getBlockForKey(key);\n    const text = currentBlock.getText();\n    const type = currentBlock.getType();\n    if (type !== \"code-block\" && CODE_BLOCK_REGEX.test(text))\n      newEditorState = handleNewCodeBlock(editorState);\n  }\n  if (editorState === newEditorState) {\n    newEditorState = handleInlineStyle(\n      config.features.inline,\n      editorState,\n      character\n    );\n  }\n  return newEditorState;\n}\n\nfunction checkReturnForState(config, editorState, ev) {\n  let newEditorState = editorState;\n  const contentState = editorState.getCurrentContent();\n  const selection = editorState.getSelection();\n  const isCollapsed = selection.isCollapsed();\n  const key = selection.getStartKey();\n  const endOffset = selection.getEndOffset();\n  const currentBlock = contentState.getBlockForKey(key);\n  const blockLength = currentBlock.getLength();\n  const type = currentBlock.getType();\n  const text = currentBlock.getText();\n\n  if (/-list-item$/.test(type) && text === \"\") {\n    newEditorState = leaveList(editorState);\n  }\n\n  const isHeader = /^header-/.test(type);\n  const isBlockQuote = type === \"blockquote\";\n  const isAtEndOfLine = endOffset === blockLength;\n  const atEndOfHeader = isHeader && isAtEndOfLine;\n  const atEndOfBlockQuote = isBlockQuote && isAtEndOfLine;\n\n  if (\n    newEditorState === editorState &&\n    isCollapsed &&\n    (atEndOfHeader || atEndOfBlockQuote)\n  ) {\n    // transform markdown (if we aren't in a codeblock that is)\n    if (!inCodeBlock(editorState)) {\n      newEditorState = checkCharacterForState(config, newEditorState, \"\\n\");\n    }\n    if (newEditorState === editorState) {\n      newEditorState = insertEmptyBlock(newEditorState);\n    } else {\n      newEditorState = RichUtils.toggleBlockType(newEditorState, type);\n    }\n  } else if (isCollapsed && (isHeader || isBlockQuote) && !isAtEndOfLine) {\n    newEditorState = splitBlockAndChange(newEditorState);\n  }\n  if (\n    newEditorState === editorState &&\n    type !== \"code-block\" &&\n    config.features.block.includes(\"CODE\") &&\n    CODE_BLOCK_REGEX.test(text)\n  ) {\n    newEditorState = handleNewCodeBlock(editorState);\n  }\n  if (newEditorState === editorState && type === \"code-block\") {\n    if (/```\\s*$/.test(text)) {\n      newEditorState = changeCurrentBlockType(\n        newEditorState,\n        type,\n        text.replace(/```\\s*$/, \"\")\n      );\n      newEditorState = insertEmptyBlock(newEditorState);\n    } else if (ev.shiftKey) {\n      newEditorState = insertEmptyBlock(newEditorState);\n    } else {\n      newEditorState = insertText(editorState, \"\\n\");\n    }\n  }\n\n  return newEditorState;\n}\n\nconst unstickyInlineStyles = (character, editorState) => {\n  const selection = editorState.getSelection();\n  if (!selection.isCollapsed()) return editorState;\n  if (editorState.getLastChangeType() !== \"md-to-inline-style\") {\n    return editorState;\n  }\n\n  const startOffset = selection.getStartOffset();\n  const content = editorState.getCurrentContent();\n  const block = content.getBlockForKey(selection.getStartKey());\n  const previousBlock = content.getBlockBefore(block.getKey());\n  const entity = block.getEntityAt(startOffset - 1);\n  if (entity !== null) return editorState;\n\n  // If we're currently in a style, but the next character doesn't have a style (or doesn't exist)\n  // we insert the characters manually without the inline style to \"unsticky\" them\n  if (!startOffset && previousBlock) {\n    // If we're in the beginning of the line we have to check styles of the previous block\n    const previousBlockStyle = previousBlock.getInlineStyleAt(\n      previousBlock.getText().length - 1\n    );\n    if (previousBlockStyle.size === 0) return editorState;\n  } else {\n    const style = block.getInlineStyleAt(startOffset - 1);\n    if (style.size === 0) return editorState;\n  }\n  const nextStyle = block.getInlineStyleAt(startOffset);\n  if (nextStyle.size !== 0) return editorState;\n\n  const newContent = Modifier.insertText(content, selection, character);\n  return EditorState.push(editorState, newContent, \"insert-characters\");\n};\n\nconst defaultConfig = {\n  renderLanguageSelect: defaultRenderSelect,\n  languages: defaultLanguages,\n  features: {\n    inline: defaultInlineWhitelist,\n    block: defaultBlockWhitelist,\n  },\n  entityType: ENTITY_TYPE,\n};\n\nconst createMarkdownPlugin = (_config = {}) => {\n  const store = {};\n\n  const config = {\n    ...defaultConfig,\n    ..._config,\n    features: {\n      ...defaultConfig.features,\n      ..._config.features,\n    },\n    entityType: {\n      ...defaultConfig.entityType,\n      ..._config.entityType,\n    },\n  };\n\n  return {\n    store,\n    decorators: [\n      createLinkDecorator({\n        entityType: config.entityType.LINK,\n      }),\n      createImageDecorator({\n        entityType: config.entityType.IMAGE,\n      }),\n    ],\n    initialize({ setEditorState, getEditorState }) {\n      store.setEditorState = setEditorState;\n      store.getEditorState = getEditorState;\n    },\n    blockStyleFn(block) {\n      switch (block.getType()) {\n        default:\n          break;\n      }\n      return null;\n    },\n\n    blockRendererFn(\n      block,\n      { setReadOnly, getReadOnly, setEditorState, getEditorState, getEditorRef }\n    ) {\n      switch (block.getType()) {\n        case CODE_BLOCK_TYPE: {\n          return {\n            component: CodeBlock,\n            props: {\n              setEditorState,\n              renderLanguageSelect: config.renderLanguageSelect,\n              languages: config.languages,\n              getReadOnly,\n              setReadOnly,\n              language: block.getData().get(\"language\"),\n              getEditorState,\n            },\n          };\n        }\n\n        default:\n          return null;\n      }\n    },\n    handleReturn(ev, editorState, { setEditorState }) {\n      if (inLink(editorState)) return \"not-handled\";\n\n      let newEditorState = checkReturnForState(config, editorState, ev);\n      const selection = newEditorState.getSelection();\n\n      // exit code blocks\n      if (\n        inCodeBlock(editorState) &&\n        !Object.is(editorState.getImmutable(), newEditorState.getImmutable())\n      ) {\n        setEditorState(newEditorState);\n        return \"handled\";\n      }\n\n      newEditorState = checkCharacterForState(config, newEditorState, \"\\n\");\n      let content = newEditorState.getCurrentContent();\n\n      // if there are actually no changes but the editorState has a\n      // current inline style we want to split the block\n      if (\n        Object.is(editorState.getImmutable(), newEditorState.getImmutable()) &&\n        editorState.getCurrentInlineStyle().size > 0\n      ) {\n        content = Modifier.splitBlock(content, selection);\n      }\n\n      newEditorState = resetInlineStyle(newEditorState);\n\n      if (editorState !== newEditorState) {\n        setEditorState(\n          EditorState.push(newEditorState, content, \"split-block\")\n        );\n        return \"handled\";\n      }\n\n      return \"not-handled\";\n    },\n    handleBeforeInput(\n      character,\n      editorState,\n      eventTimeStamp,\n      { setEditorState }\n    ) {\n      // If we're in a code block - don't transform markdown\n      if (inCodeBlock(editorState)) return \"not-handled\";\n\n      // If we're in a link - don't transform markdown\n      if (inLink(editorState)) return \"not-handled\";\n\n      const unsticky = unstickyInlineStyles(character, editorState);\n      if (editorState !== unsticky) {\n        setEditorState(unsticky);\n        return \"handled\";\n      }\n\n      const newEditorState = checkCharacterForState(\n        config,\n        editorState,\n        character\n      );\n      if (editorState !== newEditorState) {\n        setEditorState(newEditorState);\n        return \"handled\";\n      }\n      return \"not-handled\";\n    },\n    handlePastedText(text, html, editorState, { setEditorState }) {\n      if (inCodeBlock(editorState)) {\n        setEditorState(insertText(editorState, text));\n        return \"handled\";\n      }\n\n      return \"not-handled\";\n    },\n    handleKeyCommand(command, editorState, { setEditorState }) {\n      switch (command) {\n        case \"backspace\": {\n          // When a styled block is the first thing in the editor,\n          // you cannot delete it. Typing backspace only deletes the content\n          // but never deletes the block styling.\n          // This piece of code fixes the issue by changing the block type\n          // to 'unstyled' if we're on the first block of the editor and it's empty\n          const selection = editorState.getSelection();\n          const currentBlockKey = selection.getStartKey();\n          if (!currentBlockKey) return \"not-handled\";\n\n          const content = editorState.getCurrentContent();\n          const currentBlock = content.getBlockForKey(currentBlockKey);\n          const firstBlock = content.getFirstBlock();\n          if (firstBlock !== currentBlock) return \"not-handled\";\n\n          const currentBlockType = currentBlock.getType();\n          const isEmpty = currentBlock.getLength() === 0;\n          if (!isEmpty || currentBlockType === \"unstyled\") return \"not-handled\";\n\n          setEditorState(changeCurrentBlockType(editorState, \"unstyled\", \"\"));\n          return \"handled\";\n        }\n        default: {\n          return \"not-handled\";\n        }\n      }\n    },\n  };\n};\n\nexport default createMarkdownPlugin;\n","import { convertFromRaw, EditorState } from \"draft-js\";\nimport Editor from \"draft-js-plugins-editor\";\nimport createPrismPlugin from \"draft-js-prism-plugin\";\nimport Prism from \"prismjs\";\nimport \"prismjs/components/prism-bash\";\nimport \"prismjs/components/prism-c\";\nimport \"prismjs/components/prism-cpp\";\nimport \"prismjs/components/prism-go\";\nimport \"prismjs/components/prism-java\";\nimport \"prismjs/components/prism-kotlin\";\nimport \"prismjs/components/prism-perl\";\nimport \"prismjs/components/prism-ruby\";\nimport \"prismjs/components/prism-rust\";\nimport \"prismjs/components/prism-scala\";\nimport \"prismjs/components/prism-sql\";\nimport \"prismjs/components/prism-swift\";\nimport React from \"react\";\nimport createMarkdownPlugin from \"../../../../src\";\nimport initialState from \"./initial-state\";\nimport styles from \"./styles.css\";\n\nconst prismPlugin = createPrismPlugin({\n  prism: Prism,\n});\n\nconst renderLanguageSelect = ({\n  options,\n  onChange,\n  selectedValue,\n  selectedLabel,\n}) => (\n  <div className={styles.switcherContainer}>\n    <div className={styles.switcher}>\n      <select\n        className={styles.switcherSelect}\n        value={selectedValue}\n        onChange={onChange}\n      >\n        {options.map(({ label, value }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </select>\n      <div className={styles.switcherLabel}>\n        {selectedLabel}\n        {String.fromCharCode(9662)}\n      </div>\n    </div>\n  </div>\n);\n\nconst languages = {\n  js: \"JavaScript\",\n  kotlin: \"Kotlin\",\n  mathml: \"MathML\",\n};\n\nconst plugins = [\n  prismPlugin,\n  createMarkdownPlugin({\n    renderLanguageSelect,\n  }),\n];\n\nconst initialEditorState = EditorState.createWithContent(\n  convertFromRaw(initialState)\n);\n\nfunction DemoEditor(props) {\n  const [editorState, setEditorState] = React.useState(initialEditorState);\n  const editorRef = React.createRef();\n\n  function onChange(editorState) {\n    setEditorState(editorState);\n  }\n\n  function focus() {\n    editorRef.current.focus();\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.editor} onClick={focus}>\n        <Editor\n          editorState={editorState}\n          onChange={onChange}\n          plugins={plugins}\n          spellCheck\n          autoFocus\n          placeholder=\"Write something here...\"\n          ref={editorRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default DemoEditor;\n","export default {\n  entityMap: {\n    0: {\n      type: \"LINK\",\n      mutability: \"MUTABLE\",\n      data: {\n        href: \"https://github.com/brndnmtthws/draft-js-markdown-plugin-es6\",\n      },\n    },\n  },\n  blocks: [\n    {\n      key: \"8ock3\",\n      text: \"draft-js-markdown-plugin-es6\",\n      type: \"header-one\",\n      depth: 0,\n      inlineStyleRanges: [],\n      entityRanges: [],\n      data: {},\n    },\n    {\n      key: \"epvjd\",\n      text:\n        \"This is the DraftJS Markdown plugin, a fork of the excellent draft-js-markdown-shortcuts-plugin. This text you're seeing right now is actual DraftJS state! Go on, edit it and play around with different markdown syntax.\",\n      type: \"unstyled\",\n      depth: 0,\n      inlineStyleRanges: [\n        {\n          offset: 61,\n          length: 34,\n          style: \"CODE\",\n        },\n        {\n          offset: 97,\n          length: 58,\n          style: \"BOLD\",\n        },\n      ],\n      entityRanges: [\n        {\n          offset: 12,\n          length: 23,\n          key: 0,\n        },\n      ],\n      data: {},\n    },\n    {\n      key: \"e2uqe\",\n      text: \"Code\",\n      type: \"header-two\",\n      depth: 0,\n      inlineStyleRanges: [],\n      entityRanges: [],\n      data: {},\n    },\n    {\n      key: \"5m15n\",\n      text: \"Let's take a look at some code, shall we?\",\n      type: \"unstyled\",\n      depth: 0,\n      inlineStyleRanges: [\n        {\n          offset: 26,\n          length: 5,\n          style: \"ITALIC\",\n        },\n      ],\n      entityRanges: [],\n      data: {},\n    },\n    {\n      key: \"39j2p\",\n      text:\n        \"import createMarkdownPlugin from 'draft-js-markdown-plugin';\\nconst markdownPlugin = createMarkdownPlugin();\",\n      type: \"code-block\",\n      depth: 0,\n      inlineStyleRanges: [],\n      entityRanges: [],\n      data: {\n        language: \"javascript\",\n      },\n    },\n    {\n      key: \"e4c3t\",\n      text: \"Nice!\",\n      type: \"unstyled\",\n      depth: 0,\n      inlineStyleRanges: [],\n      entityRanges: [],\n      data: {},\n    },\n  ],\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\nimport GitHubCorner from \"react-github-corner\";\nimport DemoEditor from \"./components/DemoEditor\";\nimport \"./components/DemoEditor/styles.css\";\nimport \"../public/base.css\";\nimport \"../public/Draft.css\";\nimport \"../public/normalize.css\";\nimport \"../public/prism.css\";\n\nexport default function App(props) {\n  return (\n    <div style={{ height: \"100%\" }}>\n      <DemoEditor />\n      <GitHubCorner\n        href=\"https://github.com/brndnmtthws/draft-js-markdown-plugin-es6\"\n        target=\"_blank\"\n        direction=\"right\"\n      >\n        Fork me on GitHub\n      </GitHubCorner>\n    </div>\n  );\n}\n"],"sourceRoot":""}